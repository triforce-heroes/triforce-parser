export class ValidationError extends Error{}export function validateKeys(r,t){if(null===r)throw new ValidationError("data is null");if("object"!=typeof r)throw new ValidationError("data is not an object");for(let o of Object.keys(t))if(!(o in r))throw new ValidationError(`data[${o}] is missing`)}let r=new Map([[null,["null",r=>null===r]],[String,["string",r=>"string"==typeof r]],[Number,["number",r=>"number"==typeof r]],[Boolean,["boolean",r=>"boolean"==typeof r]],[Array,["array",Array.isArray]],[Object,["object",r=>null!==r&&"object"==typeof r&&!Array.isArray(r)]]]);export function validateTypeof(t,o){let e=r.get(o);if(void 0===e)throw new ValidationError("type not supported");let[a,n]=e;if(!n(t))throw new ValidationError(`data is not of type ${a}`)}